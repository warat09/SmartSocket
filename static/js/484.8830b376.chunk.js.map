{"version":3,"file":"static/js/484.8830b376.chunk.js","mappings":"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","sources":["view/node_transection/index_transaction.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { filter } from 'lodash';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  Checkbox,\r\n  TableRow,\r\n  Paper,\r\n  Container,\r\n  Typography,\r\n  Card,\r\n  Divider,\r\n  TablePagination,\r\n  IconButton,\r\n  Popover,\r\n  MenuItem\r\n} from \"@mui/material\";\r\nimport {Transaction} from '../../model/model';\r\nimport {getTransaction,Checktoken} from \"../../services/apiservice\"\r\nimport Scrollbar from \"../../components/scrollbar/Scrollbar\";\r\nimport { UserListHead,UserListToolbar } from '../../components/user';\r\nimport { Icon } from '@iconify/react';\r\nimport Iconify from \"../../components/iconify/Iconify\";\r\n\r\nconst TABLE_HEAD = [\r\n  { id: 'Asset_name_assets', label: 'Assets', alignRight: false },\r\n  { id: 'Match_mac_address', label: 'MacAddress', alignRight: false },\r\n  { id: 'Transaction_status_transaction', label: 'StatusTransaction', alignRight: false },\r\n  { id: 'Transaction_time_used', label: 'TimeUsed', alignRight: false },\r\n  { id: 'Transaction_time_update', label: 'TimeUpdate', alignRight: false },\r\n  { id: 'Transaction_on_date', label: 'On_Date', alignRight: false },\r\n  { id: 'Transaction_off_date', label: 'Off_Date', alignRight: false },\r\n];\r\n\r\nfunction descendingComparator(a:any, b:any, orderBy:any) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order:any, orderBy:any) {\r\n  return order === 'desc'\r\n    ? (a:any, b:any) => descendingComparator(a, b, orderBy)\r\n    : (a:any, b:any) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction applySortFilter(array:any, comparator:any, query:any) {\r\n  const stabilizedThis = array.map((el:any, index:any) => [el, index]);\r\n  stabilizedThis.sort((a:any, b:any) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  if (query) {\r\n    return filter(array, (_user:any) => _user.Asset_name_assets.toLowerCase().indexOf(query.toLowerCase()) !== -1);\r\n  }\r\n  return stabilizedThis.map((el:any) => el[0]);\r\n}\r\n\r\nconst HomeTransection: React.FC = () => {\r\n  \r\n  const navigate = useNavigate();\r\n\r\n  const [listassets, SetDataassetslist] = useState<Transaction[]>([]);\r\n\r\n  const [open, setOpen] = useState(null);\r\n\r\n  const [page, setPage] = useState(0);\r\n\r\n  const [order, setOrder] = useState('asc');\r\n\r\n  const [selected, setSelected]:any = useState([]);\r\n\r\n  const [orderBy, setOrderBy] = useState('Asset_name_assets');\r\n\r\n  const [filterName, setFilterName] = useState('');\r\n\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  const formatTime = (milliseconds:number) => {\r\n  const totalSeconds = Math.floor(milliseconds / 1000);\r\n  const totalMinutes = Math.floor(totalSeconds / 60);\r\n  const totalHours = Math.floor(totalMinutes / 60);\r\n  // const days = Math.floor(totalHours / 24);\r\n\r\n  const seconds = totalSeconds % 60;\r\n  const minutes = totalMinutes % 60;\r\n  const hours = totalHours % 24;\r\n\r\n  let time = '1s';\r\n  // if (days > 0) {\r\n  //   time = `${days}Day ${hours}Hours ${minutes}Minutes ${seconds} Seconds`;\r\n  // } else \r\n  if (hours > 0) {\r\n    time = `${totalHours} Hours ${minutes}Minutes ${seconds} Seconds`;\r\n  } else if (minutes > 0) {\r\n    time = `${minutes} Minutes ${seconds} Seconds`;\r\n  } else if (seconds > 0) {\r\n    time = `${seconds} Seconds`;\r\n  }\r\n  return time;\r\n}\r\n\r\n  const handleGetTransection=async(token:string)=>{\r\n    SetDataassetslist(await getTransaction(\"/Transaction/AllTransaction\",token));\r\n  }\r\n\r\n  const handleOpenMenu = (event:any) => {\r\n    setOpen(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseMenu = () => {\r\n    setOpen(null);\r\n  };\r\n\r\n  const handleRequestSort = (event:any, property:any) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event:any) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds:any = listassets.map((n:any) => n.Transaction_id_txn);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event:any, name:any) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected:any = [];\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\r\n    }\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event:any, newPage:any) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event:any) => {\r\n    setPage(0);\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n  };\r\n\r\n  const handleFilterByName = (event:any) => {\r\n    setPage(0);\r\n    setFilterName(event.target.value);\r\n  };\r\n\r\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - listassets.length) : 0;\r\n\r\n  const filteredUsers = applySortFilter(listassets, getComparator(order, orderBy), filterName);\r\n  \r\n  const isNotFound = !filteredUsers.length && !!filterName;\r\n\r\n  useEffect(() => {\r\n    const item = localStorage.getItem(\"User\");\r\n    if (item && item !== \"undefined\") {\r\n      const user = JSON.parse(item);\r\n      handleGetTransection(user.token);\r\n    }\r\n    else{\r\n      navigate('/login')\r\n    }\r\n  },[]);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n            <title> Transaction | SmartSocket </title>\r\n      </Helmet>\r\n      <Container>\r\n        <Typography variant=\"h4\" sx={{ mb: 5,mt:2 }}>\r\n          Transaction\r\n        </Typography>\r\n        <Divider sx={{borderBottomWidth: 3,mb:3,borderColor:\"black\",borderRadius:1}}/>\r\n        <Card>\r\n          <UserListToolbar numSelected={selected.length} filterName={filterName} onFilterName={handleFilterByName} />\r\n          <Scrollbar>\r\n            <TableContainer sx={{ minWidth: 800 }}>\r\n              <Table>\r\n                <UserListHead\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  headLabel={TABLE_HEAD}\r\n                  rowCount={listassets.length}\r\n                  numSelected={selected.length}\r\n                  onRequestSort={handleRequestSort}\r\n                  onSelectAllClick={handleSelectAllClick}\r\n                />\r\n                <TableBody>\r\n                  {filteredUsers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row:any) => {\r\n                    console.log(row)\r\n                    const { Transaction_id_txn,Asset_name_assets, Match_mac_address, Transaction_status_transaction, Transaction_time_used, Transaction_time_update, Transaction_on_date,Transaction_off_date  }:any = row;\r\n                    const selectedUser = selected.indexOf(Transaction_id_txn) !== -1;\r\n\r\n                    return (\r\n                      <TableRow hover key={Transaction_id_txn} tabIndex={-1} role=\"checkbox\" selected={selectedUser}>\r\n                        {/* <TableCell padding=\"checkbox\">\r\n                          <Checkbox checked={selectedUser} onChange={(event) => handleClick(event, Transaction_id_txn)} />\r\n                        </TableCell> */}\r\n\r\n                        <TableCell align=\"center\">{Asset_name_assets}</TableCell>\r\n\r\n                        <TableCell align=\"center\">{Match_mac_address}</TableCell>\r\n\r\n                        <TableCell align=\"center\">{Transaction_status_transaction}</TableCell>\r\n\r\n                        <TableCell align=\"center\">{formatTime(Transaction_time_used)}</TableCell>\r\n                        \r\n                        <TableCell align=\"center\">{new Date(Transaction_time_update).toLocaleString('sv-SE', { timeZone: 'Asia/Bangkok' })}</TableCell>\r\n\r\n                        <TableCell align=\"center\">{Transaction_on_date}</TableCell>\r\n\r\n                        <TableCell align=\"center\">{Transaction_off_date}</TableCell>\r\n\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                  {emptyRows > 0 && (\r\n                    <TableRow style={{ height: 53 * emptyRows }}>\r\n                      <TableCell colSpan={6} />\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n\r\n                {isNotFound && (\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell align=\"center\" colSpan={9} sx={{ py: 3 }}>\r\n                        <Paper\r\n                          sx={{\r\n                            textAlign: 'center',\r\n                          }}\r\n                        >\r\n                          <Typography variant=\"h6\" paragraph>\r\n                            Not found\r\n                          </Typography>\r\n\r\n                          <Typography variant=\"body2\">\r\n                            No results found for &nbsp;\r\n                            <strong>&quot;{filterName}&quot;</strong>.\r\n                            <br /> Try checking for typos or using complete words.\r\n                          </Typography>\r\n                        </Paper>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                )}\r\n              </Table>\r\n            </TableContainer>\r\n          </Scrollbar>\r\n\r\n          <TablePagination\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={listassets.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onPageChange={handleChangePage}\r\n            onRowsPerPageChange={handleChangeRowsPerPage}\r\n          />\r\n        </Card>\r\n      </Container>\r\n\r\n    </>  \r\n  );\r\n};\r\nexport default HomeTransection;\r\n"],"names":["TABLE_HEAD","id","label","alignRight","descendingComparator","a","b","orderBy","navigate","useNavigate","useState","listassets","SetDataassetslist","page","setPage","order","setOrder","selected","setSelected","setOrderBy","filterName","setFilterName","rowsPerPage","setRowsPerPage","formatTime","milliseconds","totalSeconds","Math","floor","totalMinutes","totalHours","seconds","minutes","time","handleGetTransection","token","getTransaction","emptyRows","max","length","filteredUsers","array","comparator","query","stabilizedThis","map","el","index","sort","filter","_user","Asset_name_assets","toLowerCase","indexOf","applySortFilter","getComparator","isNotFound","useEffect","item","localStorage","getItem","user","JSON","parse","Container","Typography","variant","sx","mb","mt","Divider","borderBottomWidth","borderColor","borderRadius","Card","numSelected","onFilterName","event","target","value","Scrollbar","TableContainer","minWidth","Table","headLabel","rowCount","onRequestSort","property","onSelectAllClick","checked","newSelecteds","n","Transaction_id_txn","TableBody","slice","row","console","log","Match_mac_address","Transaction_status_transaction","Transaction_time_used","Transaction_time_update","Transaction_on_date","Transaction_off_date","selectedUser","TableRow","hover","tabIndex","role","TableCell","align","Date","toLocaleString","timeZone","style","height","colSpan","py","Paper","textAlign","paragraph","TablePagination","rowsPerPageOptions","component","count","onPageChange","newPage","onRowsPerPageChange","parseInt"],"sourceRoot":""}