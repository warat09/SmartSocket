{"version":3,"file":"static/js/845.46e67164.chunk.js","mappings":"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","sources":["view/socket/Socket.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { concat, filter, update } from 'lodash';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {Node} from '../../model/model'\r\nimport {Table,TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TablePagination,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  Container,\r\n  Divider,\r\n  Checkbox,\r\n  Card,\r\n  IconButton,\r\n  Popover,\r\n  MenuItem,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Button,\r\n  Snackbar,\r\n  Alert\r\n} from \"@mui/material\"\r\nimport {getNode, updateStatusNode} from '../../services/apiservice'\r\nimport Scrollbar from \"../../components/scrollbar/Scrollbar\";\r\nimport { UserListHead,UserListToolbar } from '../../components/user';\r\nimport Iconify from \"../../components/iconify/Iconify\";\r\n\r\nconst TABLE_HEAD = [\r\n  { id: 'mac_address', label: 'M.A.C Addreess', alignRight: false },\r\n  { id: 'ip', label: 'i.p.', alignRight: false },\r\n  { id: 'date_node', label: 'Date', alignRight: false },\r\n  { id: 'status_node', label: 'status_node', alignRight: false },\r\n  { id: '' },\r\n];\r\n\r\nfunction descendingComparator(a:any, b:any, orderBy:any) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order:any, orderBy:any) {\r\n  return order === 'desc'\r\n    ? (a:any, b:any) => descendingComparator(a, b, orderBy)\r\n    : (a:any, b:any) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction applySortFilter(array:any, comparator:any, query:any) {\r\n  const stabilizedThis = array.map((el:any, index:any) => [el, index]);\r\n  stabilizedThis.sort((a:any, b:any) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  if (query) {\r\n    return filter(array, (_user:any) => _user.mac_address.toLowerCase().indexOf(query.toLowerCase()) !== -1);\r\n  }\r\n  return stabilizedThis.map((el:any) => el[0]);\r\n}\r\n\r\nconst HomeNode: React.FC = () => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [listnode, SetlistNode] = useState<Node[]>([]);\r\n\r\n  const [open, setOpen] = useState(null);\r\n\r\n  const [page, setPage] = useState(0);\r\n\r\n  const [order, setOrder] = useState('asc');\r\n\r\n  const [selected, setSelected]:any = useState([]);\r\n\r\n  const [orderBy, setOrderBy] = useState('mac_address');\r\n\r\n  const [filterName, setFilterName] = useState('');\r\n\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const [mac_address,setMac_address] = useState(\"\");\r\n\r\n  const [openAlert, setOpenAlert] = useState(false);\r\n\r\n  const [messagealert, setMessagealert]:any = useState({message:\"\",color:\"\"});\r\n\r\n  const [dialog, setdialog] = React.useState({\r\n    header: \"\",\r\n    body: \"\",\r\n    id: 0,\r\n    status: 0,\r\n  });\r\n\r\n  const handleCloseAlert = (\r\n    event?: React.SyntheticEvent | Event,\r\n    reason?: string\r\n  ) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpenAlert(false);\r\n  };\r\n\r\n  const handleGetNode= async() => {\r\n    SetlistNode(await getNode(\"/Node/AllMACAddress\"))\r\n  }\r\n\r\n  const handleOpenMenu = (event:any,mac_address:string) => {\r\n    setMac_address(mac_address)\r\n    setOpenDialog(true)\r\n      setdialog({\r\n        header: \"Disable\",\r\n        body: `Are you sure want to disable ${mac_address}?`,\r\n        id: 0,\r\n        status: 0,\r\n      });\r\n  };\r\n\r\n  const handleCloseMenu = () => {\r\n    setOpen(null);\r\n  };\r\n\r\n  const handleRequestSort = (event:any, property:any) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event:any) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds:any = listnode.map((n:any) => n.mac_address);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event:any, name:any) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected:any = [];\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\r\n    }\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event:any, newPage:any) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event:any) => {\r\n    setPage(0);\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n  };\r\n\r\n  const handleFilterByName = (event:any) => {\r\n    setPage(0);\r\n    setFilterName(event.target.value);\r\n  };\r\n\r\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - listnode.length) : 0;\r\n\r\n  const filteredUsers = applySortFilter(listnode, getComparator(order, orderBy), filterName);\r\n  \r\n  const isNotFound = !filteredUsers.length && !!filterName;\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const Agree = async() => {\r\n    await updateStatusNode(`/Node/AllMACAddress/${mac_address}`)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const item = localStorage.getItem(\"User\");\r\n    if(window.history.state !== null){\r\n      const {open,message} = window.history.state;\r\n      if(open === 1) {\r\n        setMessagealert({message:message,color:\"success\"})\r\n        setOpenAlert(true);\r\n        window.history.replaceState({}, \"\", \"\");\r\n      }\r\n    }\r\n    if (item && item !== \"undefined\") {\r\n      const user = JSON.parse(item);\r\n      handleGetNode();\r\n    }\r\n    else{\r\n      navigate('/login')\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n            <title> Node | SmartSocket </title>\r\n      </Helmet>\r\n      <Container>\r\n        <Typography variant=\"h4\" sx={{ mb: 5,mt:2 }}>\r\n          Socket List\r\n        </Typography>\r\n        <Divider sx={{borderBottomWidth: 3,mb:3,borderColor:\"black\",borderRadius:1}}/>\r\n        <Card>\r\n          <UserListToolbar numSelected={selected.length} filterName={filterName} onFilterName={handleFilterByName} />\r\n          <Scrollbar>\r\n            <TableContainer sx={{ minWidth: 800 }}>\r\n              <Table>\r\n                <UserListHead\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  headLabel={TABLE_HEAD}\r\n                  rowCount={listnode.length}\r\n                  numSelected={selected.length}\r\n                  onRequestSort={handleRequestSort}\r\n                  onSelectAllClick={handleSelectAllClick}\r\n                />\r\n                <TableBody>\r\n                  {filteredUsers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row:any) => {\r\n                    console.log(row)\r\n                    const { mac_address,ip, date_node, status_node }:any = row;\r\n                    const selectedUser = selected.indexOf(mac_address) !== -1;\r\n\r\n                    return (\r\n                      <TableRow hover key={mac_address} tabIndex={-1} role=\"checkbox\" selected={selectedUser}>\r\n                        {/* <TableCell padding=\"checkbox\">\r\n                          <Checkbox checked={selectedUser} onChange={(event) => handleClick(event, mac_address)} />\r\n                        </TableCell> */}\r\n\r\n                        <TableCell align=\"center\">{mac_address}</TableCell>\r\n\r\n                        <TableCell align=\"center\">{ip}</TableCell>\r\n                        \r\n                        <TableCell align=\"center\">{new Date(date_node).toLocaleString('sv-SE', { timeZone: 'Asia/Bangkok' })}</TableCell>\r\n\r\n                        <TableCell align=\"center\">{status_node}</TableCell>\r\n\r\n                        <TableCell align=\"center\">\r\n                          <IconButton size=\"large\" color=\"inherit\" onClick={(event)=>handleOpenMenu(event,mac_address)}>\r\n                            <Iconify icon={\"fe:disabled\"}/>\r\n                          </IconButton>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                  {emptyRows > 0 && (\r\n                    <TableRow style={{ height: 53 * emptyRows }}>\r\n                      <TableCell colSpan={6} />\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n\r\n                {isNotFound && (\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\r\n                        <Paper\r\n                          sx={{\r\n                            textAlign: 'center',\r\n                          }}\r\n                        >\r\n                          <Typography variant=\"h6\" paragraph>\r\n                            Not found\r\n                          </Typography>\r\n\r\n                          <Typography variant=\"body2\">\r\n                            No results found for &nbsp;\r\n                            <strong>&quot;{filterName}&quot;</strong>.\r\n                            <br /> Try checking for typos or using complete words.\r\n                          </Typography>\r\n                        </Paper>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                )}\r\n              </Table>\r\n            </TableContainer>\r\n          </Scrollbar>\r\n\r\n          <TablePagination\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={listnode.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onPageChange={handleChangePage}\r\n            onRowsPerPageChange={handleChangeRowsPerPage}\r\n          />\r\n        </Card>\r\n      </Container>\r\n      <Dialog\r\n          open={openDialog}\r\n          onClose={handleCloseDialog}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n          sx={{\r\n            \"& .MuiDialog-container\": {\r\n              \"& .MuiPaper-root\": {\r\n                width: \"100%\",\r\n                maxWidth: \"500px\",  // Set your width here\r\n              },\r\n            },\r\n          }}\r\n        >\r\n          <DialogTitle id=\"alert-dialog-title\">{dialog.header}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {dialog.body}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleCloseDialog}>Disagree</Button>\r\n            <Button\r\n              onClick={Agree}\r\n              autoFocus\r\n            >\r\n              Agree\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        <Snackbar\r\n          open={openAlert}\r\n          autoHideDuration={3000}\r\n          onClose={handleCloseAlert}\r\n        >\r\n          <Alert\r\n            onClose={handleCloseAlert}\r\n            variant=\"filled\"\r\n            severity={messagealert.color}\r\n            sx={{ width: \"100%\" }}\r\n          >\r\n            {messagealert.message}!\r\n          </Alert>\r\n        </Snackbar>\r\n    </>\r\n  );\r\n};\r\nexport default HomeNode\r\n\r\n"],"names":["TABLE_HEAD","id","label","alignRight","descendingComparator","a","b","orderBy","navigate","useNavigate","useState","listnode","SetlistNode","page","setPage","order","setOrder","selected","setSelected","setOrderBy","filterName","setFilterName","rowsPerPage","setRowsPerPage","openDialog","setOpenDialog","mac_address","setMac_address","openAlert","setOpenAlert","message","color","messagealert","setMessagealert","React","header","body","status","dialog","setdialog","handleCloseAlert","event","reason","handleGetNode","getNode","emptyRows","Math","max","length","filteredUsers","array","comparator","query","stabilizedThis","map","el","index","sort","filter","_user","toLowerCase","indexOf","applySortFilter","getComparator","isNotFound","handleCloseDialog","Agree","updateStatusNode","useEffect","item","localStorage","getItem","window","history","state","open","replaceState","JSON","parse","Container","Typography","variant","sx","mb","mt","Divider","borderBottomWidth","borderColor","borderRadius","Card","numSelected","onFilterName","target","value","Scrollbar","TableContainer","minWidth","Table","headLabel","rowCount","onRequestSort","property","onSelectAllClick","checked","newSelecteds","n","TableBody","slice","row","console","log","ip","date_node","status_node","selectedUser","TableRow","hover","tabIndex","role","TableCell","align","Date","toLocaleString","timeZone","IconButton","size","onClick","handleOpenMenu","Iconify","icon","style","height","colSpan","py","Paper","textAlign","paragraph","TablePagination","rowsPerPageOptions","component","count","onPageChange","newPage","onRowsPerPageChange","parseInt","Dialog","onClose","width","maxWidth","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","Snackbar","autoHideDuration","Alert","severity"],"sourceRoot":""}